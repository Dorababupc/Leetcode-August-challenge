/*
We are given a set of numbers 0s and 1s in a grid
0->water and 1->land
and we are given a chance to change at most one 0 to 1.
We have to find out the maximum area of the island that can be
made using this opportunity.
 
 Method:
 We will assign id's to each island and take the sum of all adjoint islands with diff
 ids and add one when we are at grid element 0.
 time:O(n*n).
  
  */
  class Solution {
public:
    int assignIdandreturnArea(vector<vector<int>> & grid,int i,int j,int id){
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]!=1){
            return 0;
        }
        grid[i][j]=id;
        return assignIdandreturnArea(grid,i-1,j,id)+assignIdandreturnArea(grid,i+1,j,id)+assignIdandreturnArea(grid,i,j-1,id)+assignIdandreturnArea(grid,i,j+1,id);
    }
    int largestIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        unordered_map<int,int> mp;
        int gridId=2;
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(grid[i][j]==1){
                    int area=assignIdandreturnArea(grid,i,j,gridId);
                    mp.insert({gridId,area});
                    gridId++;
                }
            }
        }
        unordered_set<int> s;
        int res=0;
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                if(grid[i][j]==0){
                    if(i>0){
                        s.insert(grid[i-1][j]);
                    }
                    if(i<n-1){
                        s.insert(grid[i+1][j]);
                    }
                    if(j>0){
                        s.insert(grid[i][j-1]);
                    }
                    if(j<m-1){
                        s.insert(grid[i][j+1]);
                    }
                    int now=1;
                    for(auto x:s){
                        now+=mp[x];
                    }
                    res=max(res,now);
                }
            }
        }
        return res;
    }
};
